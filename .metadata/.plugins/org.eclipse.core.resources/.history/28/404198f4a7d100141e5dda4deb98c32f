package generate.producer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import consume.Consumer.Consumer;
/*
 *  This class which provides methods to create dependencies.
 *  
 */
public class DependencyFactory {

	public static BufferedWriter getFileWriter(int fileIndex) throws IOException{
		
		final String fileName = String.format("file%s.txt", fileIndex);		

		File file = new File("files/", fileName);

		// if file doesnt exists, then create it
		if (!file.exists()) {
			file.createNewFile();
		}

		FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
		BufferedWriter bw = new BufferedWriter(fw);
		
		return bw;
		
	}
	
	public static Thread getConsumerThread(final BufferedWriter writer, final BlockingQueue<Message> sharedQueue){
	     return new Thread(new Consumer(writer, sharedQueue));

	}

	public static Thread getProducerThread(final BlockingQueue<Message> sharedQueue){
	     return new Thread(new Producer(sharedQueue));

	}
	/*
	 * This creates a sharedQueue object with LinkedBlockedQueue.
	 * @
	 * returns
	 */
	public static BlockingQueue<Message> getSharedQueue(final int capacity){
	    return new LinkedBlockingQueue<Message>(capacity);

	}
        
}
