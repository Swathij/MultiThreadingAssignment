package generate.producer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;

import consume.Consumer.Consumer;

public class DependencyFactory {

	public static BufferedWriter getFileWriter(int fileIndex) throws IOException{
		
		final String fileName = "file" + fileIndex;

		File file = new File("/src/%s", fileName);

		// if file doesnt exists, then create it
		if (!file.exists()) {
			file.createNewFile();
		}

		FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
		BufferedWriter bw = new BufferedWriter(fw);
//		bw.write(content);
//		bw.close();
		
		return bw;
		
	}
	
	public static Thread getConsumerThread(){
	     Thread consumer = new Thread(new Consumer(writer, sharedQueue));

	}

	public static Thread getProducerThread(){
	     Thread consumer = new Thread(new Producer(sharedQueue));

	}
	
	public static BlockingQueue getSharedQueue(){
	    return new LinkedBlockingQueue();

	}
        
}
