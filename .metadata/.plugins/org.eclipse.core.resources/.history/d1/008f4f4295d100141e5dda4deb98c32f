package generate.producer;

import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.BlockingQueue;

public class Producer implements Runnable {

	private final BlockingQueue<Message> m_sharedQueue;
	

	public Producer(final BlockingQueue<Message> sharedQueue) {
		m_sharedQueue = sharedQueue;
	}

	public static void main(final String[] args) {

		final int size = 50;
		final int numOfConsumers = 5;
		final int numOfProducers = 1;
		// Creating shared object
		@SuppressWarnings("unchecked")
		final BlockingQueue<Message> sharedQueue = 
										DependencyFactory.getSharedQueue(size);
		
		System.out.println("Starting Consumer threads");

		for (int i = 0; i < numOfConsumers; i++) {
			BufferedWriter writer = null;
			try {
				writer = DependencyFactory.getFileWriter(i);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return;
			}
			
			
			Thread consumer = DependencyFactory.getConsumerThread(writer,
					sharedQueue);
			consumer.start();
		}
		
		System.out.println("Starting Producer thread");

		for (int i = 0; i < numOfProducers; i++) {
			// Creating Producer and Consumer Thread
			Thread producer = DependencyFactory.getProducerThread(sharedQueue);
			// Starting producer and Consumer thread
			producer.start();
		}

	}

	@Override
	public void run() {
		System.out.println("Started producer " + Thread.currentThread().getName());
		while (true) {
			final Message message = generateMessage();
			try {	
				m_sharedQueue.put(message);
				System.out.println(String.format(" message  %s  added by thread %s" , message,
						Thread.currentThread().getName()));	
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	private Message generateMessage() {
	    final Random randomGenerator = new Random();
	    final int firstRandom = randomGenerator.nextInt(100);
	    final int secondRandom = randomGenerator.nextInt(100);

	    final UUID idOne = UUID.randomUUID();
	    
		return new Message(String.valueOf(idOne), firstRandom, secondRandom);
	}
	
}
